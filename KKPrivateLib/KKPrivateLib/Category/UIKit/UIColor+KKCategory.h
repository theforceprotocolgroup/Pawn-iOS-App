//
//  UIColor+KKCategory.h
//  KKPrivateLib
//
//  Created by 张可 on 2018/12/12.
//  Copyright © 2018年 keke. All rights reserved.
//

#import <UIKit/UIKit.h>

/*
 Create UIColor with a hex string.
 Example: SZHexColor(0xF0F), SZHexColor(66ccff), SZHexColor(#66CCFF88)
 
 Valid format: #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB ...
 The `#` or "0x" sign is not required.
 */

#define KKHexColor(_hex_)   [UIColor kkColorWithHexString:((__bridge NSString *)CFSTR(#_hex_))]

#define KKRGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define KKRGB(r,g,b)    [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:1.0]
#define KKHSBA(h,s,b,a) [UIColor colorWithHue:h/360.0f saturation:s/100.0f brightness:b/100.0f alpha:a]
#define KKHSB(h,s,b)    [UIColor colorWithHue:h/360.0f saturation:s/100.0f brightness:b/100.0f alpha:1.0]

/**
 Provide some method for `UIColor` to convert color between
 RGB,HSB,HSL,CMYK and Hex.
 
 | Color space | Meaning                                |
 |-------------|----------------------------------------|
 | RGB *       | Red, Green, Blue                       |
 | HSB(HSV) *  | Hue, Saturation, Brightness (Value)    |
 | HSL         | Hue, Saturation, Lightness             |
 | CMYK        | Cyan, Magenta, Yellow, Black           |
 
 Apple use RGB & HSB default.
 
 All the value in this category is float number in the range `0.0` to `1.0`.
 Values below `0.0` are interpreted as `0.0`,
 and values above `1.0` are interpreted as `1.0`.
 */

NS_ASSUME_NONNULL_BEGIN

@interface UIColor (KKCategory)

#pragma mark - Create a UIColor Object
///=============================================================================
/// @name Creating a UIColor Object
///=============================================================================

/**
 Creates and returns a color object from hex string.
 
 @discussion:
 Valid format: #RGB #RGBA #RRGGBB #RRGGBBAA 0xRGB ...
 The `#` or "0x" sign is not required.
 The alpha will be set to 1.0 if there is no alpha component.
 It will return nil when an error occurs in parsing.
 
 Example: @"0xF0F", @"66ccff", @"#66CCFF88"
 
 @param hexStr  The hex string value for the new color.
 @return        An UIColor object from string, or nil if an error occurs.
 */
+ (UIColor *)kkColorWithHexString:(NSString *)hexStr;


#pragma mark - Function
///=============================================================================
/// @name Function
///=============================================================================

/*!
 Returns the average color generated by averaging
 the colors of a specified image.
 */
+ (UIColor *)kkAverageColorFromImage:(UIImage *)image;

+ (UIColor *)kkColorFromImage:(UIImage *)image atPoint:(CGPoint)point;


#pragma mark - Get color's description
///=============================================================================
/// @name Get color's description
///=============================================================================

/**
 Returns the rgb value in hex.
 @return hex value of RGB,such as 0x66ccff.
 */
- (uint32_t)kkRgbValue;

/**
 Returns the rgba value in hex.
 @return hex value of RGBA,such as 0x66ccffff.
 */
- (uint32_t)kkRgbaValue;

/**
 Returns the color's RGB value as a hex string (lowercase).
 Such as @"0066cc".
 
 It will return nil when the color space is not RGB
 @return The color's value as a hex string.
 */
- (NSString *)kkHexString;

/**
 Returns the color's RGBA value as a hex string (lowercase).
 Such as @"0066ccff".
 
 It will return nil when the color space is not RGBA
 @return The color's value as a hex string.
 */
- (NSString *)kkHexStringWithAlpha;


#pragma mark - Retrieving Color Information
///=============================================================================
/// @name Retrieving Color Information
///=============================================================================

/**
 The color's red component value in RGB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkRed;

/**
 The color's green component value in RGB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkGreen;

/**
 The color's blue component value in RGB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkBlue;

/**
 The color's hue component value in HSB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkHue;

/**
 The color's saturation component value in HSB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkSaturation;

/**
 The color's brightness component value in HSB color space.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkBrightness;

/**
 The color's alpha component value.
 The value of this property is a float in the range `0.0` to `1.0`.
 */
@property (nonatomic, readonly) CGFloat kkAlpha;

/**
 The color's colorspace model.
 */
@property (nonatomic, readonly) CGColorSpaceModel kkColorSpaceModel;

/**
 Readable colorspace string.
 */
@property (nonatomic, readonly) NSString *kkColorSpaceString;


#pragma mark - Color Evalutation
///=============================================================================
/// @name Color Evalutation
///=============================================================================

/*!
 @abstract Boolean value indicating if the color is 'dark'.
 @discuss This algorithm uses the the constants (0.299,0.587,0.114) to determine
 the brightness of the color and if it is less than half (0.5) than it
 is considered dark.
 */
@property (nonatomic, readonly) BOOL kkIsDark;

/*!
 @abstract Boolean value indicating if the color `isGray`.
 */
@property (nonatomic, readonly) BOOL kkIsGray;

/*!
 @abstract Boolean value indicating if the color `isBlackOrWhite`.
 */
@property (nonatomic, readonly) BOOL kkIsBackOrWhite;

/*!
 @abstract `UIColor` value that represents the inverse of `self`.
 */
@property (nonatomic, readonly) UIColor *kkInverseColor;

#pragma mark - Gradient Methods

///=============================================================================
/// @name Gradient Methods
///=============================================================================

+ (UIColor *)kkGradientColorStartPoint:(CGPoint)startPoint
                              endPoint:(CGPoint)endPoint
                                 frame:(CGRect)frame
                                colors:(NSArray<UIColor *> *)colors;

+ (UIColor *)kkRadialGradientColorFrame:(CGRect)frame
                                 colors:(NSArray<UIColor *> *)colors;


@end

NS_ASSUME_NONNULL_END
